var T=Object.defineProperty;var b=(d,o,e)=>o in d?T(d,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[o]=e;var u=(d,o,e)=>b(d,typeof o!="symbol"?o+"":o,e);import{E as g,q as $,c as m,a as y,w as h,g as w,s as D,T as p,b as E,e as F,f as v}from"./index-B3i9aGE9.js";class f{static async syncSessionsFromExtension(o){if(!this.isEnabled)return{success:!1,error:"Deep Focus sync is disabled",synced:0};try{console.log("🔄 Starting Deep Focus session sync for user:",o);const e=await g.getAllDeepFocusSessions();if(!e.success||!e.data)throw new Error(e.error||"Failed to get sessions from extension");const c=e.data;console.log(`📖 Retrieved ${c.length} sessions from extension`);let t=0,r=0;const a=[];for(const n of c)try{const s=await this.syncSingleSession(o,n);s==="synced"||s==="updated"?(t++,console.log(`✅ ${s==="synced"?"Synced":"Updated"} session ${n.id}`)):r++}catch(s){const i=s instanceof Error?s.message:String(s);a.push(`Session ${n.id}: ${i}`),console.error(`❌ Failed to sync session ${n.id}:`,s)}return console.log(`🔄 Sync completed: ${t}/${c.length} sessions synced, ${r} skipped (duplicates)`),{success:a.length===0,synced:t,error:a.length>0?a.join("; "):void 0}}catch(e){return console.error("❌ Deep Focus sync failed:",e),{success:!1,synced:0,error:e instanceof Error?e.message:String(e)}}}static async getExistingSession(o,e){try{const c=$(m(y,"deepFocusSessions"),h("userId","==",o),h("extensionSessionId","==",e)),t=await w(c);if(t.empty)return{exists:!1};const r=t.docs[0];return{exists:!0,docId:r.id,data:r.data()}}catch(c){return console.error("❌ Error checking session existence:",c),{exists:!1}}}static async syncSingleSession(o,e){const c="deepFocusSessions";try{const t=await this.getExistingSession(o,e.id);if(t.exists)if(e.status==="active"){console.log(`🔄 Session ${e.id} is active, updating with latest data`);const a={duration:e.duration||0,endTime:e.endTime?p.fromDate(new Date(e.endTime)):null,status:e.status,updatedAt:D()};return await E(F(y,c,t.docId),a),console.log(`🔄 Successfully updated active session ${e.id}`),"updated"}else return console.log(`⏭️ Session ${e.id} already exists in Firebase, skipping`),"skipped";const r={userId:o,startTime:new Date(e.startTime),endTime:e.endTime?new Date(e.endTime):null,duration:e.duration||0,status:e.status||"completed",source:"extension",extensionSessionId:e.id,timezone:e.timezone||Intl.DateTimeFormat().resolvedOptions().timeZone,localDate:e.localDate||new Date(e.startTime).toISOString().split("T")[0],createdAt:e.createdAt?new Date(e.createdAt):new Date(e.startTime),updatedAt:e.updatedAt?new Date(e.updatedAt):new Date};return await v(m(y,c),{...r,startTime:p.fromDate(r.startTime),endTime:r.endTime?p.fromDate(r.endTime):null,createdAt:p.fromDate(r.createdAt),updatedAt:D()}),console.log(`📝 Successfully synced session ${e.id} to Firebase`),"synced"}catch(t){throw console.error(`❌ Failed to sync session ${e.id}:`,t),t}}static async syncTodaySessionsFromExtension(o){if(!this.isEnabled)return{success:!1,error:"Deep Focus sync is disabled",synced:0};try{console.log("🔄 Starting today's Deep Focus session sync for user:",o);const e=await g.getTodayDeepFocusSessions();if(!e.success||!e.data)throw new Error(e.error||"Failed to get today's sessions from extension");const c=e.data;console.log(`📖 Retrieved ${c.length} today's sessions from extension`);let t=0,r=0;const a=[];for(const n of c)try{const s=await this.syncSingleSession(o,n);s==="synced"||s==="updated"?(t++,console.log(`✅ ${s==="synced"?"Synced":"Updated"} session ${n.id}`)):r++}catch(s){const i=s instanceof Error?s.message:String(s);a.push(`Session ${n.id}: ${i}`),console.error(`❌ Failed to sync session ${n.id}:`,s)}return console.log(`🔄 Today's sync completed: ${t}/${c.length} sessions synced, ${r} skipped (duplicates)`),{success:a.length===0,synced:t,error:a.length>0?a.join("; "):void 0}}catch(e){return console.error("❌ Today's Deep Focus sync failed:",e),{success:!1,synced:0,error:e instanceof Error?e.message:String(e)}}}static async syncDateRangeFromExtension(o,e,c){if(!this.isEnabled)return{success:!1,error:"Deep Focus sync is disabled",synced:0};try{console.log(`🔄 Starting Deep Focus session sync for date range ${e} to ${c}`);const t=await g.getDeepFocusSessionsForDateRange(e,c);if(!t.success||!t.data)throw new Error(t.error||"Failed to get sessions from extension");const r=t.data;console.log(`📖 Retrieved ${r.length} sessions from extension for date range`);let a=0,n=0;const s=[];for(const i of r)try{const l=await this.syncSingleSession(o,i);l==="synced"||l==="updated"?a++:n++}catch(l){const S=l instanceof Error?l.message:String(l);s.push(`Session ${i.id}: ${S}`)}return console.log(`🔄 Date range sync completed: ${a}/${r.length} sessions synced, ${n} skipped (duplicates)`),{success:s.length===0,synced:a,error:s.length>0?s.join("; "):void 0}}catch(t){return console.error("❌ Date range Deep Focus sync failed:",t),{success:!1,synced:0,error:t instanceof Error?t.message:String(t)}}}static setEnabled(o){this.isEnabled=o,console.log(`🔄 Deep Focus sync ${o?"enabled":"disabled"}`)}static getStatus(){return{enabled:this.isEnabled,retryDelay:this.retryDelay}}static async removeDuplicateSessions(o){try{console.log("🧹 Starting duplicate session cleanup for user:",o);const e=$(m(y,"deepFocusSessions"),h("userId","==",o)),c=await w(e),t={};c.forEach(a=>{const n=a.data(),s=n.extensionSessionId;s&&(t[s]||(t[s]=[]),t[s].push({id:a.id,...n}))});let r=0;for(const a in t){const n=t[a];if(n.length>1){n.sort((s,i)=>s.createdAt.seconds-i.createdAt.seconds);for(let s=1;s<n.length;s++)try{await E(F(y,"deepFocusSessions",n[s].id),{status:"deleted",updatedAt:D()}),r++,console.log(`🗑️ Marked duplicate session ${n[s].id} as deleted`)}catch(i){console.error(`❌ Failed to remove duplicate session ${n[s].id}:`,i)}}}return console.log(`🧹 Cleanup completed: ${r} duplicate sessions removed`),{success:!0,removedCount:r}}catch(e){return console.error("❌ Duplicate cleanup failed:",e),{success:!1,removedCount:0,error:e instanceof Error?e.message:String(e)}}}static async testExtensionConnection(){try{return await g.testConnection()}catch(o){return console.error("❌ Extension connection test failed:",o),!1}}}u(f,"isEnabled",!0),u(f,"retryDelay",1e3),u(f,"maxRetryDelay",6e4),u(f,"maxRetries",3);export{f as DeepFocusSync};
