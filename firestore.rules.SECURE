rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // SECURITY: Private tokens collection - ZERO client access
    // Only Firebase Functions can access these tokens
    match /private_tokens/{userId} {
      allow read, write: if false; // Completely block client access
    }
    
    // Allow authenticated users to read/write their own Deep Focus sessions
    match /deepFocusSessions/{sessionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow authenticated users to read/write their own work sessions
    match /workSessions/{sessionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow authenticated users to read/write their own override sessions
    match /overrideSessions/{sessionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Allow authenticated users to read/write their own blocked sites
    match /userBlockedSites/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
    
    // Allow authenticated users to manage their own Google Calendar tokens
    match /userGoogleTokens/{userId} {
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == userId;
      allow create: if request.auth != null && 
        request.auth.uid == userId && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read: if request.auth != null && 
        request.auth.uid == userId;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        request.auth.uid == request.resource.data.userId;
    }
    
    // Tasks collection - users can only access their own tasks
    match /tasks/{taskId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Projects collection - users can only access their own projects
    match /projects/{projectId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Site usage sessions - users can only access their own data
    match /siteUsageSessions/{sessionId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.auth.uid == request.resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // User preferences - users can only access their own preferences
    match /userPreferences/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
    
    // Subscription data - users can only access their own subscription
    match /subscriptions/{userId} {
      allow read: if request.auth != null && 
        request.auth.uid == userId;
      // Write operations should only be done by Firebase Functions
      allow write: if false;
    }
    
    // REMOVED: Dangerous catch-all rule that exposed all data
    // DO NOT ADD ANY CATCH-ALL RULES HERE
    
    // Any collection not explicitly listed above will be BLOCKED by default
    // This is the secure-by-default approach
  }
}